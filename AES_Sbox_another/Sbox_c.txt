#include "S_box.h"

unsigned char Delta_Matrix[8]= { 0x43, 0x52, 0x9e, 0xc6, 0xae, 0xac, 0xde, 0xa0 };
unsigned char Inv_Delta_Matrix[8] = { 0x75, 0x30, 0x9e, 0x3e, 0x76, 0x62, 0x44, 0xe2 };
unsigned char bit_vector[8] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 };
unsigned char Inverse_table[16] = {
	0x00, 0x01, 0x03, 0x02, 0x0f, 0x0c, 0x09, 0x0b, 0x0a, 0x06, 0x08, 0x09, 0x05, 0x0e, 0x0d, 0x04
};
unsigned char affine_matrix[8] = { 0xf1, 0xe3, 0xc7, 0x8f, 0x1f, 0x3e, 0x7c, 0xf8 };

unsigned char Field_trans(unsigned char d)
{
	int i,j,count=0;
	unsigned char tmp;
	unsigned char temp = 0;

	for (i = 0; i < 8; i++)
	{
		count = 0;
		tmp = d & Delta_Matrix[i];
		for (j = 0; j < 8; j++){
			if (tmp & bit_vector[j])
				count++;
		}
		if (count % 2 == 1)
			temp ^= (0x01 << i);
	}
	
	return temp;
}

unsigned char Inverse(unsigned char k)
{
	//이 함수는 이해하기 좋게 쓴거라서 수정 하는게 좋음
	unsigned char Inv;
	unsigned char PH, PL;
	unsigned char temp1, temp2, temp3, temp4, temp5, temp6;

	PH = (k >> 4)&0x0f;
	PL = k&0x0f;


	temp1 = multi_GF_2_2(PH, PH);// PH제곱
	temp2 = multi_GF_2_2(temp1, Ramda);// PH^2*ramda
	temp3 = multi_GF_2_2((PH^PL), PL);// (PH^PL)*PL

	temp4=Inverse_table[temp2^temp3]; // inverse 값
	temp5 = multi_GF_2_2(PH, temp4);// PH*inverse값
	temp6 = multi_GF_2_2((PH^PL), temp4);//PH^PL * inverse값

	Inv = ((temp5 << 4) & 0xf0) ^ temp6;

	return Inv;
}

unsigned char Inv_Field_trans(unsigned char d)
{
	int i, j, count = 0;
	unsigned char tmp;
	unsigned char temp = 0;

	for (i = 0; i < 8; i++)
	{
		count = 0;
		tmp = d &Inv_Delta_Matrix[i];
		for (j = 0; j < 8; j++){
			if (tmp & bit_vector[j])
				count++;
		}
		if (count % 2 == 1)
			temp ^= (0x01 << i);
	}

	return temp;
}


unsigned char multi_GF_2_2(unsigned char a, unsigned char b)
{// 4 bit
	unsigned char A1, A2, B1, B2, rt;//각각 2bit

	A1 = (a >> 2) & 0x03;
	A2 = a & 0x03;
	B1 = (b >> 2) & 0x03;
	B2 = b & 0x03;

	rt = (((multi_GF_2(A1, B2) ^ multi_GF_2(A2, B1) ^ multi_GF_2(A1, B1)) << 2)&0x0c) ^ (multi_GF_2(A2, B2) ^ multi_GF_2(multi_GF_2(A1, B1), Pi));

	return rt;

}
unsigned char multi_GF_2(unsigned char a, unsigned char b)
{//2 bit
	unsigned char A1, A2, B1, B2,rt; //각각 1bit

	A1 = (a>>1)&0x01;
	A2 = a & 0x01;
	B1 = (b>>1) &0x01;
	B2 = b & 0x01;

	rt = ((((A1*B2) ^ (A2*B1) ^ (A1*B1)) << 1 )&0x02) ^ ((A2*B2) ^ (A1*B1));

	return rt;
}

unsigned char affine_trans(unsigned char s)
{
	int i, j, count;
	unsigned char tmp;
	unsigned char rb = 0;

	for (i = 0; i < 8; i++)
	{
		count = 0;
		tmp = s & affine_matrix[i];
		for (j = 0; j < 8; j++)
			if (tmp & bit_vector[j])
				count++;
		rb ^= ((count & 0x01) << i);
	}

	return rb ^ 0x63; // 연산 후 0x63 XOR
}

//S-box 생성
void Gen_S_Box(unsigned char S_box[])
{
	int i;
	unsigned char tmp[256] = { 0, };

	for (i = 0; i < 256; i++)
		S_box[i] = affine_trans( Inv_Field_trans(Inverse(Field_trans(i))));
	
}

