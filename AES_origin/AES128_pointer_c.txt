#include "AES128.h"

const unsigned char S_box[256] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};


const unsigned char InvS_box[256] = {
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d

};



//dst 라운드키, src 입력키
unsigned char KeyExpansion(unsigned char *dst, unsigned char *src)
{
	unsigned int Rcon[10] = { 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000 };
	unsigned int w[44] = { 0, };
	unsigned int temp[3] = { 0, };
	int i;

	w[0] ^= (*src<< 24) ^ (*(src + 1) << 16) ^ (*(src + 2) << 8) ^ (*(src + 3));
//	w[0] ^= (src[0] << 24) ^ (src[1] << 16) ^ (src[2] << 8) ^ (src[3]);
	w[1] ^= (*(src + 4) << 24) ^ (*(src + 5) << 16) ^ (*(src + 6) << 8) ^ (*(src + 7));
	w[2] ^= (*(src + 8) << 24) ^ (*(src + 9) << 16) ^ (*(src + 10) << 8) ^ (*(src + 11));
	w[3] ^= (*(src + 12) << 24) ^ (*(src + 13) << 16) ^ (*(src + 14) << 8) ^ (*(src + 15));


	for (i = 0; i < 10; i++)
	{
		temp[0] = (w[3 + i * 4] << 8) | (w[3 + i * 4] >> 24); //Rotword

		//Subword (int형이므로 char단위로 짤라서 역원 구하고 다시 붙임
		temp[1] = (S_box[temp[0] >> 24] << 24) ^ (S_box[(temp[0] >> 16) & 0xff] << 16) ^ (S_box[(temp[0] >> 8) & 0xff] << 8) ^ S_box[temp[0] & 0xff];

		//Rcon과 XOR 진행
		temp[2] = temp[1] ^ Rcon[i];

		//w[i]=temp XOR w[i-4]
		w[i * 4 + 4] = temp[2] ^ w[i * 4];// 진행 성공.
		w[i * 4 + 5] = w[i * 4 + 4] ^ w[i * 4 + 1];
		w[i * 4 + 6] = w[i * 4 + 5] ^ w[i * 4 + 2];
		w[i * 4 + 7] = w[i * 4 + 6] ^ w[i * 4 + 3];

	}

	//출력값을...1라운드당 4개 값 대입
	for (i = 0; i < 44; i++){
		*(dst + 4 * i) = w[i] >> 24;
		*(dst + 4 * i + 1) = (w[i] >> 16) & 0xff;
		*(dst + 4 * i + 2) = (w[i] >> 8) & 0xff;
		*(dst + 4 * i + 3) = w[i] & 0xff;
	}
}


//배수 함수
unsigned char Xtime(unsigned char Input)
{
	if ((Input >> 7) == 1) //상위비트가 1이면 1b를 XOR
		Input = (Input << 1) ^ 0x1b;
	else
		Input = Input << 1;

	return Input;
}


unsigned char Shift_Mixcol(unsigned char *dst, unsigned char *src)
{
	*dst = Xtime(*src) ^ (Xtime(*(src + 5)) ^ *(src + 5)) ^ *(src + 10) ^ *(src + 15);
	*(dst + 1) = *src ^ Xtime(*(src + 5)) ^ (Xtime(*(src + 10)) ^ (*(src + 10))) ^ *(src + 15);
	*(dst + 2) = *src ^ *(src + 5) ^ Xtime(*(src + 10)) ^ (Xtime(*(src + 15)) ^ *(src + 15));
	*(dst + 3) = (Xtime(*src) ^ *src) ^ *(src + 5) ^ *(src + 10) ^ Xtime(*(src + 15));

	*(dst + 4) = Xtime(*(src+4)) ^ (Xtime(*(src + 9)) ^ *(src + 9)) ^ *(src + 14) ^ *(src + 3);
	*(dst + 5) = *(src+4) ^ Xtime(*(src + 9)) ^ (Xtime(*(src + 14)) ^ (*(src + 14))) ^ *(src + 3);
	*(dst + 6) = *(src+4) ^ *(src + 9) ^ Xtime(*(src + 14)) ^ (Xtime(*(src + 3)) ^ *(src + 3));
	*(dst + 7) = (Xtime(*(src+4)) ^ (*(src+4))) ^ *(src + 9) ^ *(src + 14) ^ Xtime(*(src + 3));

	*(dst + 8) = Xtime(*(src + 8)) ^ (Xtime(*(src + 13)) ^ *(src + 13)) ^ *(src + 2) ^ *(src + 7);
	*(dst + 9) = *(src + 8) ^ Xtime(*(src + 13)) ^ (Xtime(*(src + 2)) ^ (*(src + 2))) ^ *(src + 7);
	*(dst + 10) = *(src + 8) ^ *(src + 13) ^ Xtime(*(src + 2)) ^ (Xtime(*(src + 7)) ^ *(src + 7));
	*(dst + 11) = (Xtime(*(src + 8)) ^ (*(src + 8))) ^ *(src + 13) ^ *(src + 2) ^ Xtime(*(src + 7));

	*(dst + 12) = Xtime(*(src + 12)) ^ (Xtime(*(src + 1)) ^ *(src + 1)) ^ *(src + 6) ^ *(src + 11);
	*(dst + 13) = *(src + 12) ^ Xtime(*(src + 1)) ^ (Xtime(*(src + 6)) ^ (*(src + 6))) ^ *(src + 11);
	*(dst + 14) = *(src + 12) ^ *(src + 1) ^ Xtime(*(src + 6)) ^ (Xtime(*(src + 11)) ^ *(src + 11));
	*(dst + 15) = (Xtime(*(src + 12)) ^ (*(src + 12))) ^ *(src + 1) ^ *(src + 6) ^ Xtime(*(src + 11));

}

//src1 평문, src2 라운드키
unsigned char EncryptionAES128(unsigned char *dst, unsigned char *src1, unsigned char *src2)
{
	unsigned char state[16] = { 0, };
	unsigned char state2[16] = { 0, };
	unsigned char state3[16] = { 0, };
	int i, j;


	//Addroundkey //순서 변경 필요없음 열로 저장함
	for (i = 0; i < 16; i++){
		state[i] = (*(src1 + i)) ^ (*(src2 + i));

	}//src2[0]~[15]까지 한번

	for (j = 0; j < Nr-2; j++){
		for (i = 0; i < 16; i++)
			state2[i] = S_box[state[i]];

		Shift_Mixcol(state3, state2);

		//Addroundkey
		for (i = 0; i < 16; i++){
			state[i] = state3[i] ^ (*(src2 + i + j * 16 + 16));//키 위치 맞추기		
		}
	}

	//마지막 라운드
	for (i = 0; i < 16; i++)
		state2[i] = S_box[state[i]];

	//shiftrows 진행
	state3[0] = state2[0];
	state3[1] = state2[5];
	state3[2] = state2[10];
	state3[3] = state2[15];

	state3[4] = state2[4];
	state3[5] = state2[9];
	state3[6] = state2[14];
	state3[7] = state2[3];

	state3[8] = state2[8];
	state3[9] = state2[13];
	state3[10] = state2[2];
	state3[11] = state2[7];

	state3[12] = state2[12];
	state3[13] = state2[1];
	state3[14] = state2[6];
	state3[15] = state2[11];
	//완료


	//Addroundkey
	for (i = 0; i < 16; i++)
	{
		*(dst+i)=state3[i] ^ *(src2 + 160 + i);
	}


}



unsigned char InvShift_SubByte(unsigned char *dst, unsigned char *src)
{
//	*dst = InvS_box[*(src)];
	*(dst) = InvS_box[*(src)];
	*(dst + 1) = InvS_box[*(src + 13)];
	*(dst + 2) = InvS_box[*(src + 10)];
	*(dst + 3) = InvS_box[*(src + 7)];

	*(dst + 4) = InvS_box[*(src + 4)];
	*(dst + 5) = InvS_box[*(src + 1)];
	*(dst + 6) = InvS_box[*(src + 14)];
	*(dst + 7) = InvS_box[*(src + 11)];

	*(dst + 8) = InvS_box[*(src + 8)];
	*(dst + 9) = InvS_box[*(src + 5)];
	*(dst + 10) = InvS_box[*(src + 2)];
	*(dst + 11) = InvS_box[*(src + 15)];

	*(dst + 12) = InvS_box[*(src + 12)];
	*(dst + 13) = InvS_box[*(src + 9)];
	*(dst + 14) = InvS_box[*(src + 6)];
	*(dst + 15) = InvS_box[*(src + 3)];


}
unsigned char InvMixcol(unsigned char *dst, unsigned char *src)
{
//맞음
	*dst = (Xtime(*src) ^ Xtime(Xtime(*src)) ^ Xtime(Xtime(Xtime(*src)))) ^ (Xtime(Xtime(Xtime(*(src + 1)))) ^ Xtime(*(src + 1)) ^ *(src + 1)) ^ (Xtime(Xtime(Xtime(*(src + 2)))) ^ Xtime(Xtime(*(src + 2))) ^ *(src + 2)) ^ (Xtime(Xtime(Xtime(*(src + 3)))) ^ *(src + 3));
	*(dst + 1) = (Xtime(Xtime(Xtime(*src))) ^ *src) ^ Xtime(Xtime(Xtime(*(src + 1)))) ^ (Xtime(Xtime(*(src + 1))) ^ Xtime(*(src + 1))) ^ (Xtime(Xtime(Xtime(*(src + 2)))) ^ Xtime(*(src + 2)) ^ *(src + 2)) ^ (Xtime(Xtime(Xtime(*(src + 3)))) ^ Xtime(Xtime(*(src + 3))) ^ *(src + 3));
	*(dst + 2) = (Xtime(Xtime(Xtime(*src))) ^ Xtime(Xtime(*src)) ^ *src) ^ (Xtime(Xtime(Xtime(*(src + 1)))) ^ *(src + 1)) ^ (Xtime(Xtime(Xtime(*(src + 2)))) ^ Xtime(Xtime(*(src + 2))) ^ Xtime(*(src + 2))) ^ (Xtime(Xtime(Xtime(*(src + 3)))) ^ Xtime(*(src + 3)) ^ *(src + 3));
	*(dst + 3) = (Xtime(Xtime(Xtime(*src))) ^ Xtime(*src) ^ *src) ^ (Xtime(Xtime(Xtime(*(src + 1)))) ^ Xtime(Xtime(*(src + 1))) ^ *(src + 1)) ^ (Xtime(Xtime(Xtime(*(src + 2)))) ^ *(src + 2)) ^ (Xtime(Xtime(Xtime(*(src + 3)))) ^ Xtime(Xtime(*(src + 3))) ^ Xtime(*(src + 3)));

	*(dst + 4) = (Xtime(*(src + 4)) ^ Xtime(Xtime(*(src + 4))) ^ Xtime(Xtime(Xtime(*(src + 4))))) ^ (Xtime(Xtime(Xtime(*(src + 5)))) ^ Xtime(*(src + 5)) ^ (*(src + 5))) ^ (Xtime(Xtime(Xtime(*(src + 6)))) ^ Xtime(Xtime(*(src + 6))) ^ (*(src + 6))) ^ (Xtime(Xtime(Xtime(*(src + 7)))) ^ (*(src + 7)));
	*(dst + 5) = (Xtime(Xtime(Xtime(*(src+4)))) ^ *(src+4)) ^ Xtime(Xtime(Xtime(*(src + 5)))) ^ (Xtime(Xtime(*(src + 5))) ^ Xtime(*(src + 5))) ^ (Xtime(Xtime(Xtime(*(src + 6)))) ^ Xtime(*(src + 6)) ^ *(src + 6)) ^ (Xtime(Xtime(Xtime(*(src + 7)))) ^ Xtime(Xtime(*(src + 7))) ^ *(src + 7));
	*(dst + 6) = (Xtime(Xtime(Xtime(*(src + 4)))) ^ Xtime(Xtime(*(src + 4))) ^ *(src + 4)) ^ (Xtime(Xtime(Xtime(*(src + 5)))) ^ *(src + 5)) ^ (Xtime(Xtime(Xtime(*(src + 6)))) ^ Xtime(Xtime(*(src + 6))) ^ Xtime(*(src + 6))) ^ (Xtime(Xtime(Xtime(*(src + 7)))) ^ Xtime(*(src + 7)) ^ *(src + 7));
	*(dst + 7) = (Xtime(Xtime(Xtime(*(src + 4)))) ^ Xtime(*(src + 4)) ^ *(src + 4)) ^ (Xtime(Xtime(Xtime(*(src + 5)))) ^ Xtime(Xtime(*(src + 5))) ^ *(src + 5)) ^ (Xtime(Xtime(Xtime(*(src + 6)))) ^ *(src + 6)) ^ (Xtime(Xtime(Xtime(*(src + 7)))) ^ Xtime(Xtime(*(src + 7))) ^ Xtime(*(src + 7)));

	*(dst + 8) = (Xtime(*(src + 8)) ^ Xtime(Xtime(*(src + 8))) ^ Xtime(Xtime(Xtime(*(src + 8))))) ^ (Xtime(Xtime(Xtime(*(src + 9)))) ^ Xtime(*(src + 9)) ^ (*(src + 9))) ^ (Xtime(Xtime(Xtime(*(src + 10)))) ^ Xtime(Xtime(*(src + 10))) ^ (*(src + 10))) ^ (Xtime(Xtime(Xtime(*(src + 11)))) ^ (*(src + 11)));
	*(dst + 9) = (Xtime(Xtime(Xtime(*(src + 8)))) ^ *(src + 8)) ^ Xtime(Xtime(Xtime(*(src + 9)))) ^ (Xtime(Xtime(*(src + 9))) ^ Xtime(*(src + 9))) ^ (Xtime(Xtime(Xtime(*(src + 10)))) ^ Xtime(*(src + 10)) ^ *(src + 10)) ^ (Xtime(Xtime(Xtime(*(src + 11)))) ^ Xtime(Xtime(*(src + 11))) ^ *(src + 11));
	*(dst + 10) = (Xtime(Xtime(Xtime(*(src + 8)))) ^ Xtime(Xtime(*(src + 8))) ^ *(src + 8)) ^ (Xtime(Xtime(Xtime(*(src + 9)))) ^ *(src + 9)) ^ (Xtime(Xtime(Xtime(*(src + 10)))) ^ Xtime(Xtime(*(src + 10))) ^ Xtime(*(src + 10))) ^ (Xtime(Xtime(Xtime(*(src + 11)))) ^ Xtime(*(src + 11)) ^ *(src + 11));
	*(dst + 11) = (Xtime(Xtime(Xtime(*(src + 8)))) ^ Xtime(*(src + 8)) ^ *(src + 8)) ^ (Xtime(Xtime(Xtime(*(src + 9)))) ^ Xtime(Xtime(*(src + 9))) ^ *(src + 9)) ^ (Xtime(Xtime(Xtime(*(src + 10)))) ^ *(src + 10)) ^ (Xtime(Xtime(Xtime(*(src + 11)))) ^ Xtime(Xtime(*(src + 11))) ^ Xtime(*(src + 11)));

	*(dst + 12) = (Xtime(*(src + 12)) ^ Xtime(Xtime(*(src + 12))) ^ Xtime(Xtime(Xtime(*(src + 12))))) ^ (Xtime(Xtime(Xtime(*(src + 13)))) ^ Xtime(*(src + 13)) ^ (*(src + 13))) ^ (Xtime(Xtime(Xtime(*(src + 14)))) ^ Xtime(Xtime(*(src + 14))) ^ (*(src + 14))) ^ (Xtime(Xtime(Xtime(*(src + 15)))) ^ (*(src + 15)));
	*(dst + 13) = (Xtime(Xtime(Xtime(*(src + 12)))) ^ *(src + 12)) ^ Xtime(Xtime(Xtime(*(src + 13)))) ^ (Xtime(Xtime(*(src + 13))) ^ Xtime(*(src + 13))) ^ (Xtime(Xtime(Xtime(*(src + 14)))) ^ Xtime(*(src + 14)) ^ *(src + 14)) ^ (Xtime(Xtime(Xtime(*(src + 15)))) ^ Xtime(Xtime(*(src + 15))) ^ *(src + 15));
	*(dst + 14) = (Xtime(Xtime(Xtime(*(src + 12)))) ^ Xtime(Xtime(*(src + 12))) ^ *(src + 12)) ^ (Xtime(Xtime(Xtime(*(src + 13)))) ^ *(src + 13)) ^ (Xtime(Xtime(Xtime(*(src + 14)))) ^ Xtime(Xtime(*(src + 14))) ^ Xtime(*(src + 14))) ^ (Xtime(Xtime(Xtime(*(src + 15)))) ^ Xtime(*(src + 15)) ^ *(src + 15));
	*(dst + 15) = (Xtime(Xtime(Xtime(*(src + 12)))) ^ Xtime(*(src + 12)) ^ *(src + 12)) ^ (Xtime(Xtime(Xtime(*(src + 13)))) ^ Xtime(Xtime(*(src + 13))) ^ *(src + 13)) ^ (Xtime(Xtime(Xtime(*(src + 14)))) ^ *(src + 14)) ^ (Xtime(Xtime(Xtime(*(src + 15)))) ^ Xtime(Xtime(*(src + 15))) ^ Xtime(*(src + 15)));



}

//dst 평문 출력값 src1 암호문 src2 라운드키
unsigned char DecryptionAES128(unsigned char *dst, unsigned char *src1, unsigned char *src2)
{
	unsigned char state[16] = { 0, };
	unsigned char state2[16] = { 0, };
	unsigned char state3[16] = { 0, };
	int i, j;


	//Addroundkey //순서 변경 필요없음 열로 저장함
	for (i = 0; i < 16; i++){
		state[i] = (*(src1 + i)) ^ (*(src2 + 160 + i));//11번째 라운드 키
	}

	for (i = 0; i < Nr-2; i++){//10round 진행
		InvShift_SubByte(state2, state);
		for (j = 0; j < 16; j++)//addroundkey
		{
			state3[j] = state2[j] ^ (*(src2 + (144 - i * 16) + j));
		}
		InvMixcol(state, state3);	
	}
	//마지막 라운드
	InvShift_SubByte(state2, state);
	for (j = 0; j < 16; j++)//addroundkey
	{
		*(dst+j) = state2[j] ^ (*(src2 + j));
	}



}

void main()
{
	unsigned char Plaintext[16] = { 0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34 };
	unsigned char key[16] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
	unsigned char RoundKey[176];
	unsigned char Ciphertext[16] = { 0, };
	unsigned char Plain[16] = { 0, };



	KeyExpansion(RoundKey, key);

	EncryptionAES128(Ciphertext, Plaintext, RoundKey);

	DecryptionAES128(Plain, Ciphertext, RoundKey);

}