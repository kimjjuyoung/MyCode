#include "AES.h"

const unsigned char S_box[256] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

const unsigned char InvS_box[256] = {
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d

};


//먼저 입력비트를 state로 분할
//shiftrow 와 Mixcolums 합치기

unsigned char Shift_Mixcol(unsigned char Output[4][4], unsigned char Input[4][4])
{

	//ShiftRows 진행
	//Mixcolums 진행 
	//Xtime 진행

	Output[0][0] = Xtime(Input[0][0]) ^ (Xtime(Input[1][1]) ^ Input[1][1]) ^ Input[2][2] ^ Input[3][3];
	Output[1][0] = Input[0][0] ^ Xtime(Input[1][1]) ^ (Xtime(Input[2][2]) ^ Input[2][2]) ^ Input[3][3];
	Output[2][0] = Input[0][0] ^ Input[1][1] ^ Xtime(Input[2][2]) ^ (Xtime(Input[3][3]) ^ Input[3][3]);
	Output[3][0] = (Xtime(Input[0][0]) ^ Input[0][0]) ^ Input[1][1] ^ Input[2][2] ^ (Xtime(Input[3][3]));

	Output[0][1] = Xtime(Input[0][1]) ^ (Xtime(Input[1][2]) ^ Input[1][2]) ^ Input[2][3] ^ Input[3][0];
	Output[1][1] = Input[0][1] ^ Xtime(Input[1][2]) ^ (Xtime(Input[2][3]) ^ Input[2][3]) ^ Input[3][0];
	Output[2][1] = Input[0][1] ^ Input[1][2] ^ Xtime(Input[2][3]) ^ (Xtime(Input[3][0]) ^ Input[3][0]);
	Output[3][1] = (Xtime(Input[0][1]) ^ Input[0][1]) ^ Input[1][2] ^ Input[2][3] ^ (Xtime(Input[3][0]));

	Output[0][2] = Xtime(Input[0][2]) ^ (Xtime(Input[1][3]) ^ Input[1][3]) ^ Input[2][0] ^ Input[3][1];
	Output[1][2] = Input[0][2] ^ Xtime(Input[1][3]) ^ (Xtime(Input[2][0]) ^ Input[2][0]) ^ Input[3][1];
	Output[2][2] = Input[0][2] ^ Input[1][3] ^ Xtime(Input[2][0]) ^ (Xtime(Input[3][1]) ^ Input[3][1]);
	Output[3][2] = (Xtime(Input[0][2]) ^ Input[0][2]) ^ Input[1][3] ^ Input[2][0] ^ (Xtime(Input[3][1]));

	Output[0][3] = Xtime(Input[0][3]) ^ (Xtime(Input[1][0]) ^ Input[1][0]) ^ Input[2][1] ^ Input[3][2];
	Output[1][3] = Input[0][3] ^ Xtime(Input[1][0]) ^ (Xtime(Input[2][1]) ^ Input[2][1]) ^ Input[3][2];
	Output[2][3] = Input[0][3] ^ Input[1][0] ^ Xtime(Input[2][1]) ^ (Xtime(Input[3][2]) ^ Input[3][2]);
	Output[3][3] = (Xtime(Input[0][3]) ^ Input[0][3]) ^ Input[1][0] ^ Input[2][1] ^ (Xtime(Input[3][2]));

}


unsigned char AddRoundKey(unsigned char Output[4][4], unsigned char RoundKey[4][4], unsigned char Input[4][4])
{
	int i, j;

	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
			Output[i][j] = RoundKey[i][j] ^ Input[i][j];
}

//배수 함수
unsigned char Xtime(unsigned char Input)
{
	if ((Input >> 7) == 1) //상위비트가 1이면 1b를 XOR
		Input = (Input << 1) ^ 0x1b;
	else
		Input = Input << 1;

	return Input;
}


unsigned char InvShift_SubByte(unsigned char Output[4][4], unsigned char Input[4][4])
{
	Output[0][0] = InvS_box[Input[0][0]], Output[0][1] = InvS_box[Input[0][1]], Output[0][2] = InvS_box[Input[0][2]], Output[0][3] = InvS_box[Input[0][3]];
	Output[1][0] = InvS_box[Input[1][3]], Output[1][1] = InvS_box[Input[1][0]], Output[1][2] = InvS_box[Input[1][1]], Output[1][3] = InvS_box[Input[1][2]];
	Output[2][0] = InvS_box[Input[2][2]], Output[2][1] = InvS_box[Input[2][3]], Output[2][2] = InvS_box[Input[2][0]], Output[2][3] = InvS_box[Input[2][1]];
	Output[3][0] = InvS_box[Input[3][1]], Output[3][1] = InvS_box[Input[3][2]], Output[3][2] = InvS_box[Input[3][3]], Output[3][3] = InvS_box[Input[3][0]];
}

unsigned char InvMixcol(unsigned char Output[4][4], unsigned char Input[4][4])
{//e: xtime 3번 ^ 2번 ^ 1번, b: 3번 ^ 1번^안한거, d: 3번^2번^안한거, 9: 3번^ 안한거
	Output[0][0] = (Xtime(Input[0][0]) ^ Xtime(Xtime(Input[0][0])) ^ Xtime(Xtime(Xtime(Input[0][0])))) ^ (Xtime(Xtime(Xtime(Input[1][0]))) ^ Xtime(Input[1][0]) ^ Input[1][0]) ^ (Xtime(Xtime(Xtime(Input[2][0]))) ^ Xtime(Xtime(Input[2][0])) ^ Input[2][0]) ^ (Xtime(Xtime(Xtime(Input[3][0]))) ^ Input[3][0]);
	Output[1][0] = (Xtime(Xtime(Xtime(Input[0][0]))) ^ Input[0][0]) ^ Xtime(Xtime(Xtime(Input[1][0]))) ^ (Xtime(Xtime(Input[1][0])) ^ Xtime(Input[1][0])) ^ (Xtime(Xtime(Xtime(Input[2][0]))) ^ Xtime(Input[2][0]) ^ Input[2][0]) ^ (Xtime(Xtime(Xtime(Input[3][0]))) ^ Xtime(Xtime(Input[3][0])) ^ Input[3][0]);
	Output[2][0] = (Xtime(Xtime(Xtime(Input[0][0]))) ^ Xtime(Xtime(Input[0][0])) ^ Input[0][0]) ^ (Xtime(Xtime(Xtime(Input[1][0]))) ^ Input[1][0]) ^ (Xtime(Xtime(Xtime(Input[2][0]))) ^ Xtime(Xtime(Input[2][0])) ^ Xtime(Input[2][0])) ^ (Xtime(Xtime(Xtime(Input[3][0]))) ^ Xtime(Input[3][0]) ^ Input[3][0]);
	Output[3][0] = (Xtime(Xtime(Xtime(Input[0][0]))) ^ Xtime(Input[0][0]) ^ Input[0][0]) ^ (Xtime(Xtime(Xtime(Input[1][0]))) ^ Xtime(Xtime(Input[1][0])) ^ Input[1][0]) ^ (Xtime(Xtime(Xtime(Input[2][0]))) ^ Input[2][0]) ^ (Xtime(Xtime(Xtime(Input[3][0]))) ^ Xtime(Xtime(Input[3][0])) ^ Xtime(Input[3][0]));

	Output[0][1] = (Xtime(Input[0][1]) ^ Xtime(Xtime(Input[0][1])) ^ Xtime(Xtime(Xtime(Input[0][1])))) ^ (Xtime(Xtime(Xtime(Input[1][1]))) ^ Xtime(Input[1][1]) ^ Input[1][1]) ^ (Xtime(Xtime(Xtime(Input[2][1]))) ^ Xtime(Xtime(Input[2][1])) ^ Input[2][1]) ^ (Xtime(Xtime(Xtime(Input[3][1]))) ^ Input[3][1]);
	Output[1][1] = (Xtime(Xtime(Xtime(Input[0][1]))) ^ Input[0][1]) ^ Xtime(Xtime(Xtime(Input[1][1]))) ^ (Xtime(Xtime(Input[1][1])) ^ Xtime(Input[1][1])) ^ (Xtime(Xtime(Xtime(Input[2][1]))) ^ Xtime(Input[2][1]) ^ Input[2][1]) ^ (Xtime(Xtime(Xtime(Input[3][1]))) ^ Xtime(Xtime(Input[3][1])) ^ Input[3][1]);
	Output[2][1] = (Xtime(Xtime(Xtime(Input[0][1]))) ^ Xtime(Xtime(Input[0][1])) ^ Input[0][1]) ^ (Xtime(Xtime(Xtime(Input[1][1]))) ^ Input[1][1]) ^ (Xtime(Xtime(Xtime(Input[2][1]))) ^ Xtime(Xtime(Input[2][1])) ^ Xtime(Input[2][1])) ^ (Xtime(Xtime(Xtime(Input[3][1]))) ^ Xtime(Input[3][1]) ^ Input[3][1]);
	Output[3][1] = (Xtime(Xtime(Xtime(Input[0][1]))) ^ Xtime(Input[0][1]) ^ Input[0][1]) ^ (Xtime(Xtime(Xtime(Input[1][1]))) ^ Xtime(Xtime(Input[1][1])) ^ Input[1][1]) ^ (Xtime(Xtime(Xtime(Input[2][1]))) ^ Input[2][1]) ^ (Xtime(Xtime(Xtime(Input[3][1]))) ^ Xtime(Xtime(Input[3][1])) ^ Xtime(Input[3][1]));

	Output[0][2] = (Xtime(Input[0][2]) ^ Xtime(Xtime(Input[0][2])) ^ Xtime(Xtime(Xtime(Input[0][2])))) ^ (Xtime(Xtime(Xtime(Input[1][2]))) ^ Xtime(Input[1][2]) ^ Input[1][2]) ^ (Xtime(Xtime(Xtime(Input[2][2]))) ^ Xtime(Xtime(Input[2][2])) ^ Input[2][2]) ^ (Xtime(Xtime(Xtime(Input[3][2]))) ^ Input[3][2]);
	Output[1][2] = (Xtime(Xtime(Xtime(Input[0][2]))) ^ Input[0][2]) ^ Xtime(Xtime(Xtime(Input[1][2]))) ^ (Xtime(Xtime(Input[1][2])) ^ Xtime(Input[1][2])) ^ (Xtime(Xtime(Xtime(Input[2][2]))) ^ Xtime(Input[2][2]) ^ Input[2][2]) ^ (Xtime(Xtime(Xtime(Input[3][2]))) ^ Xtime(Xtime(Input[3][2])) ^ Input[3][2]);
	Output[2][2] = (Xtime(Xtime(Xtime(Input[0][2]))) ^ Xtime(Xtime(Input[0][2])) ^ Input[0][2]) ^ (Xtime(Xtime(Xtime(Input[1][2]))) ^ Input[1][2]) ^ (Xtime(Xtime(Xtime(Input[2][2]))) ^ Xtime(Xtime(Input[2][2])) ^ Xtime(Input[2][2])) ^ (Xtime(Xtime(Xtime(Input[3][2]))) ^ Xtime(Input[3][2]) ^ Input[3][2]);
	Output[3][2] = (Xtime(Xtime(Xtime(Input[0][2]))) ^ Xtime(Input[0][2]) ^ Input[0][2]) ^ (Xtime(Xtime(Xtime(Input[1][2]))) ^ Xtime(Xtime(Input[1][2])) ^ Input[1][2]) ^ (Xtime(Xtime(Xtime(Input[2][2]))) ^ Input[2][2]) ^ (Xtime(Xtime(Xtime(Input[3][2]))) ^ Xtime(Xtime(Input[3][2])) ^ Xtime(Input[3][2]));

	Output[0][3] = (Xtime(Input[0][3]) ^ Xtime(Xtime(Input[0][3])) ^ Xtime(Xtime(Xtime(Input[0][3])))) ^ (Xtime(Xtime(Xtime(Input[1][3]))) ^ Xtime(Input[1][3]) ^ Input[1][3]) ^ (Xtime(Xtime(Xtime(Input[2][3]))) ^ Xtime(Xtime(Input[2][3])) ^ Input[2][3]) ^ (Xtime(Xtime(Xtime(Input[3][3]))) ^ Input[3][3]);
	Output[1][3] = (Xtime(Xtime(Xtime(Input[0][3]))) ^ Input[0][3]) ^ Xtime(Xtime(Xtime(Input[1][3]))) ^ (Xtime(Xtime(Input[1][3])) ^ Xtime(Input[1][3])) ^ (Xtime(Xtime(Xtime(Input[2][3]))) ^ Xtime(Input[2][3]) ^ Input[2][3]) ^ (Xtime(Xtime(Xtime(Input[3][3]))) ^ Xtime(Xtime(Input[3][3])) ^ Input[3][3]);
	Output[2][3] = (Xtime(Xtime(Xtime(Input[0][3]))) ^ Xtime(Xtime(Input[0][3])) ^ Input[0][3]) ^ (Xtime(Xtime(Xtime(Input[1][3]))) ^ Input[1][3]) ^ (Xtime(Xtime(Xtime(Input[2][3]))) ^ Xtime(Xtime(Input[2][3])) ^ Xtime(Input[2][3])) ^ (Xtime(Xtime(Xtime(Input[3][3]))) ^ Xtime(Input[3][3]) ^ Input[3][3]);
	Output[3][3] = (Xtime(Xtime(Xtime(Input[0][3]))) ^ Xtime(Input[0][3]) ^ Input[0][3]) ^ (Xtime(Xtime(Xtime(Input[1][3]))) ^ Xtime(Xtime(Input[1][3])) ^ Input[1][3]) ^ (Xtime(Xtime(Xtime(Input[2][3]))) ^ Input[2][3]) ^ (Xtime(Xtime(Xtime(Input[3][3]))) ^ Xtime(Xtime(Input[3][3])) ^ Xtime(Input[3][3]));

}


//출력값 [라운드수][4][4], 입력값 암호키
unsigned char KeyExpansion(unsigned char Output[Nr][4][4], unsigned char CipherKey[4][4])
{
	unsigned int w[44] = { 0, }; //워드 처리 단위 32bit
	unsigned int Rcon[10] = { 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000 };
	unsigned int temp[4] = { 0, }; //입력받은 char 값을 int형으로 변환하기 위해 이용
	int i = 0;


	w[0] ^= (( CipherKey[0][0]) << 24) ^ ((temp[1] ^ CipherKey[0][1]) << 16) ^ ((temp[2] ^ CipherKey[0][2]) << 8) ^ (temp[3] ^ CipherKey[0][3]);
	w[1] ^= ((temp[0] ^ CipherKey[1][0]) << 24) ^ ((temp[1] ^ CipherKey[1][1]) << 16) ^ ((temp[2] ^ CipherKey[1][2]) << 8) ^ (temp[3] ^ CipherKey[1][3]);
	w[2] ^= ((temp[0] ^ CipherKey[2][0]) << 24) ^ ((temp[1] ^ CipherKey[2][1]) << 16) ^ ((temp[2] ^ CipherKey[2][2]) << 8) ^ (temp[3] ^ CipherKey[2][3]);
	w[3] ^= ((temp[0] ^ CipherKey[3][0]) << 24) ^ ((temp[1] ^ CipherKey[3][1]) << 16) ^ ((temp[2] ^ CipherKey[3][2]) << 8) ^ (temp[3] ^ CipherKey[3][3]);
	//cipher key 값 w0,w1,w2,w3 에 대입.

	//4의 배수 Rotword, Subword, XOR with Rcon, w[i-4] XOR w[i] 
	//그 외 w[i-4] XOR w[i]


	for (i = 0; i < 10; i++)
	{

		temp[0] = (w[3 + i * 4] << 8) | (w[3 + i * 4] >> 24); //Rotword

		//Subword (int형이므로 char단위로 짤라서 역원 구하고 다시 붙임
		temp[1] = (S_box[temp[0] >> 24] << 24) ^ (S_box[(temp[0] >> 16) & 0xff] << 16) ^ (S_box[(temp[0] >> 8) & 0xff] << 8) ^ S_box[temp[0] & 0xff];

		//Rcon과 XOR 진행
		temp[2] = temp[1] ^ Rcon[i];

		//w[i]=temp XOR w[i-4]
		w[i * 4 + 4] = temp[2] ^ w[i * 4];// 진행 성공.
		w[i * 4 + 5] = w[i * 4 + 4] ^ w[i * 4 + 1];
		w[i * 4 + 6] = w[i * 4 + 5] ^ w[i * 4 + 2];
		w[i * 4 + 7] = w[i * 4 + 6] ^ w[i * 4 + 3];

		Output[i][0][0] = w[0 + 4 * i] >> 24;
		Output[i][0][1] = w[1 + 4 * i] >> 24;
		Output[i][0][2] = w[2 + 4 * i] >> 24;
		Output[i][0][3] = w[3 + 4 * i] >> 24;

		Output[i][1][0] = (w[0 + 4 * i] >> 16) & 0xff;
		Output[i][1][1] = (w[1 + 4 * i] >> 16) & 0xff;
		Output[i][1][2] = (w[2 + 4 * i] >> 16) & 0xff;
		Output[i][1][3] = (w[3 + 4 * i] >> 16) & 0xff;

		Output[i][2][0] = (w[0 + 4 * i] >> 8) & 0xff;
		Output[i][2][1] = (w[1 + 4 * i] >> 8) & 0xff;
		Output[i][2][2] = (w[2 + 4 * i] >> 8) & 0xff;
		Output[i][2][3] = (w[3 + 4 * i] >> 8) & 0xff;

		Output[i][3][0] = w[0 + 4 * i] & 0xff;
		Output[i][3][1] = w[1 + 4 * i] & 0xff;
		Output[i][3][2] = w[2 + 4 * i] & 0xff;
		Output[i][3][3] = w[3 + 4 * i] & 0xff;

	}//마지막 1번더
	Output[10][0][0] = w[40] >> 24;
	Output[10][0][1] = w[41] >> 24;
	Output[10][0][2] = w[42] >> 24;
	Output[10][0][3] = w[43] >> 24;

	Output[10][1][0] = (w[40] >> 16) & 0xff;
	Output[10][1][1] = (w[41] >> 16) & 0xff;
	Output[10][1][2] = (w[42] >> 16) & 0xff;
	Output[10][1][3] = (w[43] >> 16) & 0xff;

	Output[10][2][0] = (w[40] >> 8) & 0xff;
	Output[10][2][1] = (w[41] >> 8) & 0xff;
	Output[10][2][2] = (w[42] >> 8) & 0xff;
	Output[10][2][3] = (w[43] >> 8) & 0xff;

	Output[10][3][0] = w[40] & 0xff;
	Output[10][3][1] = w[41] & 0xff;
	Output[10][3][2] = w[42] & 0xff;
	Output[10][3][3] = w[43] & 0xff;

	//Output값 char[4][4]로 변환
}


unsigned char EncryptionAES128(unsigned char Output[4][4], unsigned char Key[4][4], unsigned char Input[4][4])
{
	int i, j, k;

	unsigned char RKey[Nr][4][4] = { 0, };
	unsigned char state[4][4] = { 0, }, state2[4][4] = { 0, }, state3[4][4] = { 0, }, state4[4][4] = { 0, };

	KeyExpansion(RKey, Key);// 키 확장

	//Input 값 순서 변경
	for (i = 0; i < 4; i++){
		state[i][0] = Input[0][i];
		state[i][1] = Input[1][i];
		state[i][2] = Input[2][i];
		state[i][3] = Input[3][i];
	}

	//AddroundKey
	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
			state2[i][j] = state[i][j] ^ RKey[0][i][j];



	//반복 1~9 Round
	for (k = 0; k < 9; k++)
	{
		for (i = 0; i < 4; i++)
			for (j = 0; j < 4; j++)
				state3[i][j] = S_box[state2[i][j]]; //SubByte 진행

		Shift_Mixcol(state4, state3); //Shift & Mixcol 진행
		AddRoundKey(state2, RKey[1 + k], state4); //AddRoundKey 진행
	}
	//마지막 10라운드
	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
			state3[i][j] = S_box[state2[i][j]];
	//subbyte 진행
	state[0][0] = state3[0][0], state[0][1] = state3[0][1], state[0][2] = state3[0][2], state[0][3] = state3[0][3];
	state[1][0] = state3[1][1], state[1][1] = state3[1][2], state[1][2] = state3[1][3], state[1][3] = state3[1][0];
	state[2][0] = state3[2][2], state[2][1] = state3[2][3], state[2][2] = state3[2][0], state[2][3] = state3[2][1];
	state[3][0] = state3[3][3], state[3][1] = state3[3][0], state[3][2] = state3[3][1], state[3][3] = state3[3][2];
	//ShiftRows 진행
	AddRoundKey(state, RKey[10], state);
	//AddroundKey 진행

	//출력값 순서 변경
	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
			Output[i][j] = state[j][i];

}


unsigned char DecryptionAES128(unsigned char Output[4][4], unsigned char Key[4][4], unsigned char Input[4][4])
{
	int i, j, k;
	unsigned char state[4][4] = { 0, }, state2[4][4] = { 0, }, state3[4][4] = { 0, }, state4[4][4] = { 0, };
	unsigned char RKey[Nr][4][4] = { 0, };

	//키확장
	KeyExpansion(RKey, Key);

	for (i = 0; i < 4; i++){ //state 꼴로 변환
		state[i][0] = Input[0][i];
		state[i][1] = Input[1][i];
		state[i][2] = Input[2][i];
		state[i][3] = Input[3][i];
	}

	AddRoundKey(state2, RKey[10], state); //키 거꾸로 대입

	for (k = 0; k < Nr - 2; k++){// 마지막전 라운드 까지 진행
		InvShift_SubByte(state3, state2); //shift 와 subbyte 진행
		AddRoundKey(state4, RKey[9 - k], state3);// AddroundKey 진행
		InvMixcol(state2, state4);//Mixcol 진행
	}
	InvShift_SubByte(state3, state2);//마지막라운드
	AddRoundKey(state4, RKey[0], state3);

	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
			Output[i][j] = state4[j][i];// state형식을 다시 출력값 형태로

}

unsigned char Aes128Test(unsigned char Plaintext[4][4], unsigned char Cypherkey[4][4])
{
	unsigned char Cyphertext[4][4] = { 0, }, text[4][4] = { 0, };
	int i, j;


	EncryptionAES128(Cyphertext, Cypherkey, Plaintext);
	DecryptionAES128(text, Cypherkey, Cyphertext);

	puts("\n*******평문**************");
	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
			printf("%02x ", Plaintext[i][j]);

	puts("\n*******암호화************");
	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
			printf("%02x ", Cyphertext[i][j]);

	puts("\n*******복호화************");
	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
			printf("%02x ", text[i][j]);
	puts("");

	return 0;
}
